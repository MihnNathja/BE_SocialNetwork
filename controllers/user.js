const User = require("../models/user"); // Import User model t·ª´ Mongoose
const Post = require("../models/post");
const crypto = require("crypto");
const bcrypt = require("bcrypt");
const { sendMail } = require("../utils/mail");
const cloudinary = require("../config/cloudinary");

// üìå L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo username
const getUserByUsername = async (req, res) => {
    const { username } = req.params;

    try {
        const user = await User.findOne({ username }).select("-password"); // Lo·∫°i b·ªè password khi tr·∫£ v·ªÅ
        if (!user) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }
        return res.status(200).json(user);
    } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng" });
    }
};
const getProfile = async (req, res) => {
    try {
      const { userId } = req.params;
      // T√¨m user theo ID
      const user = await User.findById(userId).select("username profile avatar friends bio favoriteTags");
  
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
  
      // ƒê·∫øm s·ªë b√†i vi·∫øt c·ªßa user
      const postsCount = await Post.countDocuments({ userid: userId });
  
      // Chu·∫©n b·ªã d·ªØ li·ªáu tr·∫£ v·ªÅ
      const responseData = {
        id: user._id,
        username: user.username,
        fullname: user.profile.name,
        avatar: user.profile.avatar,
        friendsCount: user.friends.length,
        postsCount: postsCount, // S·ªë l∆∞·ª£ng b√†i vi·∫øt
        bio: user.profile.bio,
        favoriteTags: user.profile.favoriteTag || []
      };
  
      res.status(200).json(responseData);
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: "Internal Server Error" });
    }
  };

// üìå ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
const login = async (req, res) => {
    const { username, password } = req.body;
    if (!username || !password) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p username v√† password" });
    }

    try {
        const user = await User.findOne({ username });
        if (!user || !(await bcrypt.compare(password, user.password))) {
            return res.status(401).json({ message: "Sai username ho·∫∑c password" });
        }

        const userData = user.toObject();
        delete userData.password; // X√≥a password tr∆∞·ªõc khi g·ª≠i v·ªÅ

        return res.status(200).json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            user: {
                _id: user._id,
                username: user.username,
                email: user.email,
            }
        });
    } catch (error) {
        console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau" });
    }
};

// üìå ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
const register = async (req, res) => {
    const { username, email, password } = req.body;

    // üîπ Ki·ªÉm tra xem c√°c tr∆∞·ªùng c√≥ ƒë·∫ßy ƒë·ªß kh√¥ng
    if (!username || !email || !password ) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }


    try {
        // üîπ Ki·ªÉm tra username ho·∫∑c email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ $or: [{ username }, { email }] });
        if (existingUser) {
            return res.status(400).json({ message: "Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i" });
        }

        // üîπ T·∫°o OTP ng·∫´u nhi√™n v√† m√£ h√≥a m·∫≠t kh·∫©u
        const otp = crypto.randomInt(100000, 999999).toString();
        const hashedPassword = await bcrypt.hash(password, 10);

        // üîπ T·∫°o user m·ªõi
        const newUser = new User({
            username,
            email,
            password: hashedPassword,
            otp,
            otpExpiresAt: new Date(Date.now() + 10 * 60 * 1000),
        });

        await newUser.save();
        await sendMail(email, "X√°c minh t√†i kho·∫£n", `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`);

        return res.status(200).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c minh t√†i kho·∫£n." });
    } catch (error) {
        console.error("L·ªói ƒëƒÉng k√Ω:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
    }
};


// üìå X√°c minh t√†i kho·∫£n b·∫±ng OTP
const verifyAccount = async (req, res) => {
    const { email, otp } = req.body;
    if (!email || !otp) {
        return res.status(400).json({ message: "Vui l√≤ng x√°c nh·∫≠n m√£ OTP" });
    }

    try {
        const user = await User.findOne({ email, otp });
        if (!user) {
            return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
        }

        user.isVerified = true;
        user.otp = null;
        user.otpExpiresAt = null;
        await user.save();

        return res.status(200).json({ message: "X√°c minh t√†i kho·∫£n th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói x√°c minh t√†i kho·∫£n:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
    }
};

// üìå Qu√™n m·∫≠t kh·∫©u - G·ª≠i OTP
const forgotPassword = async (req, res) => {
    const { email } = req.body;
    if (!email) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p email" });
    }

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
        }

        const otp = crypto.randomInt(100000, 999999).toString();
        user.otp = otp;
        user.otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000);
        await user.save();

        await sendMail(email, "Qu√™n m·∫≠t kh·∫©u", `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`);

        return res.status(200).json({ message: "ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email c·ªßa b·∫°n." });
    } catch (error) {
        console.error("L·ªói qu√™n m·∫≠t kh·∫©u:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
    }
};
// üìå X√°c nh·∫≠n OTP khi l·∫•y l·∫°i m·∫≠t kh·∫©u
const verifyOTP =  async (req, res) => {
    const { email, otp } = req.body;
    if (!email || !otp ) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }
    try {
        const user = await User.findOne({ email, otp });
        if (!user) {
            return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá" });
        }

        user.otp = null;
        await user.save();

        return res.status(200).json({ message: "M√£ OTP ch√≠nh x√°c" });
    } catch (error) {
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
    }
    
}
// üìå ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u

const resetPassword = async (req, res) => {
    const { email, newPassword, confirmPassword } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!email || !newPassword || !confirmPassword) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin." });
    }

    if (newPassword !== confirmPassword) {
        return res.status(400).json({ message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp." });
    }

    if (newPassword.length < 6) {
        return res.status(400).json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±." });
    }

    try {
        // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i." });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        user.password = await bcrypt.hash(newPassword, 10);
        
        // X√≥a th√¥ng tin OTP ƒë·ªÉ tr√°nh s·ª≠ d·ª•ng l·∫°i
        user.otp = null;
        user.otpExpiresAt = null;
        await user.save();

        return res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng." });
    } catch (error) {
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau." });
    }
};

const updateProfile = async (req, res) => {
    try {
        const { userId, fullname, bio } = req.body;
        let avatarUrl = null;

        // N·∫øu c√≥ file ·∫£nh th√¨ upload l√™n Cloudinary
        if (req.file) {
            try {
                avatarUrl = await uploadImageToCloudinary(req.file);
            } catch (error) {
                return res.status(500).json({ error: "L·ªói upload ·∫£nh!" });
            }
        }

        // C·∫≠p nh·∫≠t th√¥ng tin user
        await updateUserProfile(userId, fullname, bio, avatarUrl, res);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "L·ªói server!" });
    }
};

// Upload ·∫£nh l√™n Cloudinary
const uploadImageToCloudinary = (file) => {
    return new Promise((resolve, reject) => {
        const stream = cloudinary.uploader.upload_stream(
            { folder: "avatars" },
            (error, result) => {
                if (error) reject(error);
                else resolve(result.secure_url);
            }
        );
        stream.end(file.buffer);
    });
};

// C·∫≠p nh·∫≠t user v√†o database
async function updateUserProfile(userId, fullname, bio, avatarUrl, res) {
    try {
        const updateData = {};
        if (fullname) updateData["profile.name"] = fullname;
        if (bio) updateData["profile.bio"] = bio;
        if (avatarUrl) updateData["profile.avatar"] = avatarUrl;

        const user = await User.findByIdAndUpdate(userId, updateData, { new: true });

        if (!user) return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

        res.json({
            message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
            user: {
                fullname: user.profile.name,
                bio: user.profile.bio,
                avatar: user.profile.avatar,
            }
        });
        
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t th√¥ng tin!" });
    }
}


const uploadAvatar = async (req, res) => {
    // try {
    //     const { userId } = req.params;

    //     if (!req.file) {
    //         return res.status(400).json({ error: "Vui l√≤ng ch·ªçn ·∫£nh ƒë·ªÉ upload!" });
    //     }

    //     // L∆∞u ·∫£nh t·∫°m v√†o file buffer
    //     const fileBuffer = `data:image/jpeg;base64,${req.file.buffer.toString("base64")}`;

    //     // Upload ·∫£nh l√™n Cloudinary
    //     const result = await cloudinary.uploader.upload(fileBuffer, {
    //         folder: "avatars", 
    //     });

    //      // C·∫≠p nh·∫≠t URL avatar v√†o MongoDB
    //      const user = await User.findByIdAndUpdate(userId, 
    //         { avatar: result.secure_url, updatedAt: new Date() }, 
    //         { new: true }
    //     ).select("_id username email avatar updatedAt");

    //     return res.json({ message: "Upload th√†nh c√¥ng", user });
    // } catch (error) {
    //     return res.status(500).json({ error: error.message });
    // }
};
module.exports = {
    getUserByUsername,
    login,
    register,
    verifyAccount,
    forgotPassword,
    verifyOTP,
    resetPassword,
    uploadAvatar,
    getProfile,
    updateProfile,
};
