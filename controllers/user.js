const User = require("../models/user"); // Import User model t·ª´ Mongoose
const crypto = require("crypto");
const bcrypt = require("bcrypt");
const { sendMail } = require("../utils/mail");

// üìå L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo username
const getUserByUsername = async (req, res) => {
    const { username } = req.params;

    try {
        const user = await User.findOne({ username }).select("-password"); // Lo·∫°i b·ªè password khi tr·∫£ v·ªÅ
        if (!user) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }
        return res.status(200).json(user);
    } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng" });
    }
};

// üìå ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
const login = async (req, res) => {
    const { username, password } = req.body;
    if (!username || !password) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p username v√† password" });
    }

    try {
        const user = await User.findOne({ username });
        if (!user || !(await bcrypt.compare(password, user.password))) {
            return res.status(401).json({ message: "Sai username ho·∫∑c password" });
        }

        const userData = user.toObject();
        delete userData.password; // X√≥a password tr∆∞·ªõc khi g·ª≠i v·ªÅ

        return res.status(200).json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", user: userData });
    } catch (error) {
        console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau" });
    }
};

// üìå ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
const register = async (req, res) => {
    const { username, email, password } = req.body;
    if (!username || !email || !password) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    try {
        const existingUser = await User.findOne({ $or: [{ username }, { email }] });
        if (existingUser) {
            return res.status(400).json({ message: "Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i" });
        }

        const otp = crypto.randomInt(100000, 999999).toString();
        const hashedPassword = await bcrypt.hash(password, 10);

        const newUser = new User({
            username,
            email,
            password: hashedPassword,
            otp,
            otpExpiresAt: new Date(Date.now() + 10 * 60 * 1000),
        });

        await newUser.save();
        await sendMail(email, "X√°c minh t√†i kho·∫£n", `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`);

        return res.status(200).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c minh t√†i kho·∫£n." });
    } catch (error) {
        console.error("L·ªói ƒëƒÉng k√Ω:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
    }
};

// üìå X√°c minh t√†i kho·∫£n b·∫±ng OTP
const verifyAccount = async (req, res) => {
    const { email, otp } = req.body;
    if (!email || !otp) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p email v√† m√£ OTP" });
    }

    try {
        const user = await User.findOne({ email, otp });
        if (!user) {
            return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
        }

        user.isVerified = true;
        user.otp = null;
        user.otpExpiresAt = null;
        await user.save();

        return res.status(200).json({ message: "X√°c minh t√†i kho·∫£n th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói x√°c minh t√†i kho·∫£n:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
    }
};

// üìå Qu√™n m·∫≠t kh·∫©u - G·ª≠i OTP
const forgotPassword = async (req, res) => {
    const { email } = req.body;
    if (!email) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p email" });
    }

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
        }

        const otp = crypto.randomInt(100000, 999999).toString();
        user.otp = otp;
        user.otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000);
        await user.save();

        await sendMail(email, "Qu√™n m·∫≠t kh·∫©u", `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`);

        return res.status(200).json({ message: "ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email c·ªßa b·∫°n." });
    } catch (error) {
        console.error("L·ªói qu√™n m·∫≠t kh·∫©u:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
    }
};

// üìå ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng OTP
const resetPassword = async (req, res) => {
    const { email, otp, newPassword } = req.body;
    if (!email || !otp || !newPassword) {
        return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    try {
        const user = await User.findOne({ email, otp });
        if (!user) {
            return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá" });
        }

        user.password = await bcrypt.hash(newPassword, 10);
        user.otp = null;
        user.otpExpiresAt = null;
        await user.save();

        return res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng." });
    } catch (error) {
        console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
        return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
    }
};

module.exports = {
    getUserByUsername,
    login,
    register,
    verifyAccount,
    forgotPassword,
    resetPassword,
};
